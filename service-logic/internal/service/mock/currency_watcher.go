// Code generated by MockGen. DO NOT EDIT.
// Source: currency_watcher.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	lib "github.com/zifter/currency/lib"
	types "github.com/zifter/currency/service-logic/internal/types"
	reflect "reflect"
)

// MockChatGate is a mock of ChatGate interface
type MockChatGate struct {
	ctrl     *gomock.Controller
	recorder *MockChatGateMockRecorder
}

// MockChatGateMockRecorder is the mock recorder for MockChatGate
type MockChatGateMockRecorder struct {
	mock *MockChatGate
}

// NewMockChatGate creates a new mock instance
func NewMockChatGate(ctrl *gomock.Controller) *MockChatGate {
	mock := &MockChatGate{ctrl: ctrl}
	mock.recorder = &MockChatGateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChatGate) EXPECT() *MockChatGateMockRecorder {
	return m.recorder
}

// SendMsg mocks base method
func (m *MockChatGate) SendMsg(msg *lib.ChatMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockChatGateMockRecorder) SendMsg(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockChatGate)(nil).SendMsg), msg)
}

// MockRepo is a mock of Repo interface
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// IsEntryExists mocks base method
func (m *MockRepo) IsEntryExists(ctx context.Context, e *types.RatePost) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEntryExists", ctx, e)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEntryExists indicates an expected call of IsEntryExists
func (mr *MockRepoMockRecorder) IsEntryExists(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEntryExists", reflect.TypeOf((*MockRepo)(nil).IsEntryExists), ctx, e)
}

// CreateEntry mocks base method
func (m *MockRepo) CreateEntry(ctx context.Context, e *types.RatePost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntry", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEntry indicates an expected call of CreateEntry
func (mr *MockRepoMockRecorder) CreateEntry(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntry", reflect.TypeOf((*MockRepo)(nil).CreateEntry), ctx, e)
}
